{"version":3,"sources":["store/modules/robots/request.js","store/modules/robots/index.js","store/modules/robots/action.js","store/modules/serchox/index.js","store/modules/serchox/action.js","components/Routes/index.js","serviceWorker.js","store/rootSaga.js","store/rootReducer.js","store/index.js","index.js"],"names":["fetchRobots","a","fetch","response","json","Jsonresp","message","workerRobots","watchRobots","request","getRobots","type","payload","call","put","takeLatest","initialState","initial","failure","pending","state","action","workerSearch","watchSearchBox","initiatSearch","name","App","lazy","Routes","fallback","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","rootSaga","all","combineReducers","searchReducer","robots","sagaModdleware","createSagaMiddleware","middlewares","enhancers","__REDUX_DEVTOOLS_EXTENSION__","push","createLogger","composedEnhancers","compose","applyMiddleware","store","createStore","rootReducer","run","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.883f04ee.chunk.js","sourcesContent":["export default {\r\n    fetchRobots: async () => {\r\n        try{\r\n            const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n            const Jsonresp = await response.json();\r\n            return Jsonresp;\r\n        } catch(err){\r\n            return err.message\r\n        }\r\n    }\r\n}\r\n","import { takeLatest, call, put } from 'redux-saga/effects';\r\n\r\nimport { SUCCESS_ROBOTS, FAILED_ROOTS, GET_ROBOTS} from './action';\r\nimport request from './request';\r\n\r\nconst { fetchRobots } = request;\r\n\r\nexport const getRobots = () => ({type: GET_ROBOTS, payload: ''})\r\n\r\nfunction* workerRobots(){\r\n    const response = yield call(fetchRobots)\r\n\r\n    if(typeof response === 'string') yield put({ type: FAILED_ROOTS })\r\n    else yield put({ type: SUCCESS_ROBOTS, payload: response })\r\n};\r\n\r\nexport function* watchRobots() {\r\n    yield takeLatest(GET_ROBOTS, workerRobots);\r\n};\r\n\r\nconst initialState = {\r\n    initial: [],\r\n    failure: false,\r\n    pending: false\r\n};\r\n\r\nexport default (state=initialState, action={}) => {\r\n    switch(action.type){\r\n        case SUCCESS_ROBOTS:\r\n            return {\r\n                ...initialState,\r\n                initial: action.payload\r\n            };\r\n        case GET_ROBOTS:\r\n            return {\r\n                ...state,\r\n                pending: true\r\n\r\n            };\r\n        case FAILED_ROOTS:\r\n            return {\r\n                ...initialState,\r\n                failure: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","export const GET_ROBOTS = 'GET_ROBOTS';\r\nexport const SUCCESS_ROBOTS = 'SUCCESS_ROBOTS';\r\nexport const FAILED_ROOTS = 'FAILED_ROOTS';\r\n","import { takeLatest, put } from 'redux-saga/effects';\r\n\r\nimport { SEARCH_NAME, INITIATE_SEARCH } from './action.js';\r\n\r\nexport const initiatSearch = (payload='') => ({ type: INITIATE_SEARCH, payload });\r\nconst updateSearchVal = (payload) => ({type: SEARCH_NAME, payload})\r\n\r\nfunction* workerSearch (action) {\r\n    yield put(updateSearchVal(action.payload));\r\n};\r\n\r\nexport function* watchSearchBox () {\r\n    yield takeLatest(INITIATE_SEARCH, workerSearch)\r\n};\r\n\r\nconst initialState = {\r\n    name: ''\r\n};\r\n\r\nexport default (state=initialState, action = {}) => {\r\n    switch(action.type){\r\n        case SEARCH_NAME:\r\n            return {\r\n                name: action.payload\r\n            };\r\n        default:\r\n            return state\r\n    };\r\n};\r\n","export const SEARCH_NAME = 'SEARCH_NAME';\r\nexport const INITIATE_SEARCH = 'INITIATE_SEARCH';\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\r\nconst App = lazy(() => import('../../containers/App/App'));\r\n\r\nconst Routes = () =>\r\n    <Router>\r\n        <Suspense fallback = {<h1>Loading Robots...</h1>}>\r\n            <Switch>\r\n                <Route exact path='/' component={() => <h1>Home</h1>} />\r\n                <Route path='/robots' component={App} />\r\n            </Switch>\r\n        </Suspense>\r\n    </Router>\r\n\r\n\r\nexport default Routes;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { all } from 'redux-saga/effects';\r\nimport { watchSearchBox } from './modules/serchox';\r\nimport { watchRobots } from './modules/robots';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchSearchBox(),\r\n        watchRobots()\r\n    ])\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport searchReducer from './modules/serchox';\r\nimport robots from './modules/robots';\r\n\r\nexport default combineReducers({\r\n    searchReducer,\r\n    robots\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nimport rootSaga from './rootSaga';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst sagaModdleware = createSagaMiddleware();\r\nconst middlewares = [sagaModdleware];\r\nconst innitialState = {};\r\nconst enhancers = [];\r\n\r\n// deelopment envioronment\r\n\r\nconst { __REDUX_DEVTOOLS_EXTENSION__ } = window;\r\n\r\nif(typeof __REDUX_DEVTOOLS_EXTENSION__ === 'function'){\r\n    enhancers.push(__REDUX_DEVTOOLS_EXTENSION__());\r\n}\r\n\r\nmiddlewares.push(createLogger());\r\n\r\n// end development\r\n\r\nconst composedEnhancers = compose(\r\n    applyMiddleware(...middlewares),\r\n    ...enhancers\r\n);\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    innitialState,\r\n    composedEnhancers\r\n    );\r\n\r\nsagaModdleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport Routes from './components/Routes/index.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport store from './store/index';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Routes />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}