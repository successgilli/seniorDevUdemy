{"version":3,"sources":["components/Card/Card.js","components/SerchBox/SerchBox.js","components/Scroll/Scroll.js","containers/App/App.js"],"names":["Card","name","email","id","className","alt","src","mapDispatchToProps","initiatSearch","connect","initSearch","onChange","e","target","value","type","placeholder","Scroll","children","style","overflowY","height","state","searchReducer","robots","searchVal","initial","failure","pending","getRobots","fetchRobots","useState","current","robotvalues","setRobotArrayValues","useEffect","map","key","filteredRobots","filter","toLowerCase","includes","length"],"mappings":"8JAgBeA,G,MAZF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,GAAhB,OACT,kBAAC,WAAD,KACI,yBAAKC,UAAU,mDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,iBACpB,6BACI,wBAAIC,UAAU,KAAKH,GACnB,2BAAIC,QCYdK,EAAqB,CACvBC,c,MAAAA,GAGWC,cAAQ,KAAMF,EAAdE,EAnBG,SAAC,GAAmC,IAAlBC,EAAiB,EAAhCF,cAGjB,OACI,yBAAKJ,UAAU,OACX,2BACIO,SALS,SAACC,GAAD,OAAOF,EAAWE,EAAEC,OAAOC,QAMpCV,UAAU,oCACVW,KAAK,SACLC,YAAY,oBCNbC,EARA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACd,OACI,yBAAKd,UAAU,MAAMe,MAAO,CAACC,UAAW,SAAUC,OAAQ,SACrDH,I,QCyFET,uBAdS,SAACa,GAAW,IAEfrB,EAEfqB,EAFFC,cAAiBtB,KAFc,EAI7BqB,EADFE,OAGF,MAAO,CACLC,UAAWxB,EACXyB,QAR+B,EAGrBA,QAMVC,QAT+B,EAGZA,QAOnBC,QAV+B,EAGHA,WAWQ,CAAEC,eAA3BpB,EAlFH,SAAC,GAMN,IALLgB,EAKI,EALJA,UACWK,EAIP,EAJJD,UACAD,EAGI,EAHJA,QACAD,EAEI,EAFJA,QACAD,EACI,EADJA,QACI,EACuCK,mBAAS,CAClDC,QAAS,KAFP,mBACGC,EADH,KACgBC,EADhB,KAYJC,qBAAU,WAERL,MACC,IAEHK,qBAAU,WACRD,EAAoB,CAClBF,QAASN,MAEV,CAACA,IArBA,IAyBEF,EAFcS,EAAZD,QAEeI,KAAI,gBAAGnC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,GAAhB,OACzB,kBAAC,EAAD,CACEF,KAAMA,EACNC,MAAOA,EACPC,GAAIA,EACJkC,IAAKlC,OAeT,OAXAgC,qBAAU,WACR,IAAIG,EAAiBZ,EAAQa,QAAO,YAClC,OADgD,EAAXtC,KACzBuC,cAAcC,SAAShB,EAAUe,kBAG/CN,EAAoB,eACfD,EADc,CAEjBD,QAASM,OAEV,CAACb,IAGF,yBAAKrB,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,6BACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,KACE,6BACIwB,GAAY,2CACZD,GAAY,+CACM,IAAlBH,EAAOkB,QAAiBlB","file":"static/js/4.c3dc44c2.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nimport 'tachyons';\r\n\r\nconst Card = ({ name, email, id }) => (\r\n    <Fragment>\r\n        <div className=\"tc bg-light-green dib br3 pa3 grow ma2 shadow-5\">\r\n            <img alt=\"robot\" src={`https://robohash.org/${id}?150Ã—150`} />\r\n            <div>\r\n                <h4 className=\"b\">{name}</h4>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    </Fragment>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { initiatSearch } from '../../store/modules/serchox/index';\r\n\r\nimport 'tachyons';\r\n\r\nconst SearchBox = ({ initiatSearch: initSearch }) => {\r\n    const HandleChange = (e) => initSearch(e.target.value)\r\n\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                onChange={HandleChange}\r\n                className=\"pa3 ba b---green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"Search robo\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    initiatSearch\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchBox);\r\n","import React from 'react';\r\n\r\nconst Scroll = ({ children }) => {\r\n    return (\r\n        <div className=\"tjk\" style={{overflowY: 'scroll', height: '80vh'}}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n// import robotArray from './robots.js';\r\n\r\nimport Card from '../../components/Card/Card.js';\r\nimport SearchBox from '../../components/SerchBox/SerchBox';\r\nimport Scroll from '../../components/Scroll/Scroll';\r\n\r\nimport { getRobots } from '../../store/modules/robots/index';\r\n\r\nimport 'tachyons';\r\n\r\nconst App = ({\r\n  searchVal,\r\n  getRobots: fetchRobots,\r\n  pending,\r\n  failure,\r\n  initial\r\n}) => {\r\n  const [robotvalues, setRobotArrayValues] = useState({\r\n    current: []\r\n  });\r\n\r\n  // const getRobots = async () => {\r\n  //   const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n  //   const Jsonresp = await response.json();\r\n  //   return Jsonresp;\r\n  // };\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => {\r\n  \r\n    fetchRobots()\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setRobotArrayValues({\r\n      current: initial\r\n    });\r\n  }, [initial]);\r\n\r\n  const { current } = robotvalues;\r\n\r\n  const robots = current.map(({ name, email, id }) => (\r\n    <Card\r\n      name={name}\r\n      email={email}\r\n      id={id}\r\n      key={id}\r\n    />\r\n  ));\r\n\r\n  useEffect(() => {\r\n    let filteredRobots = initial.filter(({ name }) => {\r\n      return name.toLowerCase().includes(searchVal.toLowerCase());\r\n    });\r\n\r\n    setRobotArrayValues({\r\n      ...robotvalues,\r\n      current: filteredRobots\r\n    });\r\n  }, [searchVal])\r\n\r\n  return (\r\n    <div className=\"tc\">\r\n      <h1 className='f1'>Robo Friends</h1>\r\n      <div>\r\n        <SearchBox />\r\n      </div>\r\n      <Scroll>\r\n        <div>\r\n          {(pending) && <h3>Loading ...</h3>}\r\n          {(failure) && <h3>Failed To Fetch</h3>}\r\n          {(robots.length !== 0) && robots}\r\n        </div>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const {\r\n    searchReducer: { name },\r\n    robots: { initial, failure, pending }\r\n  } = state;\r\n\r\n  return {\r\n    searchVal: name,\r\n    initial,\r\n    failure,\r\n    pending\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getRobots })(App);\r\n"],"sourceRoot":""}